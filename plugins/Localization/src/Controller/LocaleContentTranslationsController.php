<?php

namespace Localization\Controller;

use App\Controller\PageController;
use App\Model\Table\LocaleContentsTable;
use App\Services\PluginTranslator\PluginTranslator;
use Cake\Event\Event;
use Cake\Network\Request;
use Page\Controller\Component\PageComponent;
use Page\Model\Entity\PageElement;

/**
 * @property LocaleContentsTable LocaleContents
 */
class LocaleContentTranslationsController extends PageController
{
    /** @var PageElement */
    private $localeContent;

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub

        $this->loadModel('Locales');
        $this->loadModel('LocaleContents');
    }

    public function beforeFilter(Event $event)
    {
        parent::beforeFilter($event);

        $this->localeContent = $this->Page->get('locale_content_id');

        $this->localeContent
            ->setDisplayFrom('locale_content.en')
            ->setLabel('English')
        ;
    }

    public function index()
    {
        $localeOptions = $this->Locales->getList()
            ->where([$this->Locales->aliasField('name') . ' <> ' => 'English']) // english not needed
            ->toArray()
        ;

        $this->Page
            ->addFilter('locale_id')
            ->setOptions($localeOptions)
        ;

        parent::index();
    }

    public function edit($id)
    {
        $this->setPlugins();

        $this->localeContent->setDisabled(true);

        parent::edit($id);
    }

    public function add()
    {
        $this->setPlugins();
        $this->localeContent
            ->setControlType('select')
            ->setOptions($this->LocaleContents->find('list', ['valueField' => 'en'])->toArray())
        ;

        $this->Page->get('locale_id')->setControlType('select');

        parent::add();
    }

    private function setPlugins()
    {
        /** @var PageElement $plugin */
        $plugin = $this->Page->get('plugin');

        $plugin
            ->setControlType('select')
            ->setOptions($plugins = PluginTranslator::getPlugins());
    }
}